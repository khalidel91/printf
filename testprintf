#include "main.h"


char *int_to_base(int num, int base)
{
static char buf[33] = {0};
const char *digits = "0123456789abcdefghijklmnopqrstuvwxyz";
int i = 30;
if (num == 0)
{
buf[i--] = '0';
}
else
{
int sign = (num < 0) ? -1 : 1;
num *= sign;
while (num)
{
buf[i--] = digits[num % base];
num /= base;
}
if (sign == -1)
{
buf[i--] = '-';
}
}
return (&buf[i + 1]);
}

/**
*case_cs - our function
*@i: index'
*@arg: arguments 
*@count: pointer
*Return:num of char printed
*/

int case_cs(int i, va_list arg, int *count)
{
int c;
char *str;
if (i == 'c')
{
c = va_arg(arg, int);
count += write(STDOUT_FILENO, &c, 1);
}
else if (i == 's')
{
str = va_arg(arg, char*);
if (str == NULL)
{
str = "(null)";
}
*count += write(STDOUT_FILENO, str, strlen(str));
}
return (0);
}

/**
* case_di - our function
*@i: index
*@arg: arguments 
*@count: pointer
*Return:num of char printed
*/

int case_di(int i, va_list arg, int *count)
{
char *str;
int num;
if (i == 'd' || i == 'i')
{
num = va_arg(arg, int);
str = int_to_base(num, 10);
*count += write(STDOUT_FILENO, str, strlen(str));
}
else
{
return (-1);
}
return (0);
}

/**
* casebin - our function
*@i: index's-specifier-in-format-str
*@arg: arguments of specifer
*@count: pointer-to-count-printed-char
*Return:num of char printed
*/

int casebin(int i, va_list arg, int *count)
{
char *str;
int num;
if (i == 'b')
{
num = va_arg(arg, int);
str = int_to_base(num, 2);
*count += write(STDOUT_FILENO, str, strlen(str));
}
else
{
return (-1);
}
return (0);
}
********************************************/
/**
 * _printf - our printf main function
 * @format: string containing format specifier
 * Return: number of characters printed
 */

int _printf(const char *format, ...)
{
va_list arg;
int count = 0;
va_start(arg, format);
while (*format)
{
if (*format == '%')
{
format++;
switch (*format)
{
case 'd':
case 'i':
case_di(*format, arg, &count);
break;
case 'c':
case 's':
case_cs(*format, arg, &count);
break;
case '%':
write(STDOUT_FILENO, "%", 1);
count++;
break;
case 'b':
casebin(*format, arg, &count);
break;
default:
write(STDOUT_FILENO, "%", 1);
write(STDOUT_FILENO, &(*format), 1);
count += 2;
break;
}}
else
{
write(STDOUT_FILENO, &(*format), 1);
count++;
} format++;
}
va_end(arg);
return (count);
}
